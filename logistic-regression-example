{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries:\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define sigmoid function: \n",
    "def sigmoid(z):\n",
    "    # Compute sigmoid function\n",
    "    # J = sigmoid(z) computes the sigmoid of z.\n",
    "    \n",
    "    return 1./(1.+np.exp(-z))\n",
    "\n",
    "def h(theta, x):\n",
    "    return sigmoid(np.dot(x, theta))\n",
    "\n",
    "def derivative(theta, X, y): ## define 𝝏𝒉 𝝏𝜽\n",
    "    return np.dot(X.T, (h(theta, X) - y)) / m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cost or loss or error function:\n",
    "def loss(theta, x, y):\n",
    "    # J = loss(theta, X, y) computes the loss or cost of using theta as the\n",
    "    # parameter for logistic regression and the gradient of the cost\n",
    "    # w.r.t. to the parameters.\n",
    "    \n",
    "    # Initialize some useful values\n",
    "    m = len(y); # number of training examples\n",
    "\n",
    "    J = 0;\n",
    "    \n",
    "    term1 = np.dot(y.T, np.log(h(theta, x)))\n",
    "    term2 = np.dot(1-y.T, np.log(1-h(theta, x)))\n",
    "    J = -np.sum(term1 + term2) / m\n",
    "    \n",
    "    #J = h(theta, x)* (1-y) + m + np.log(np.exp(-m) + np.exp(-(m+np.dot(theta, x))))\n",
    "    \n",
    "    return J"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to predict label for test points\n",
    "def predict(theta, xt):    \n",
    "    # Predict whether the label is 0 or 1 using learned logistic \n",
    "    # regression parameters theta\n",
    "    #   p = predict(theta, t) computes the predictions for xt using a \n",
    "    #   threshold at 0.5 (i.e., if sigmoid(theta, x) >= 0.5, predict 1) else predict 0\n",
    "\n",
    "    m = size(xt, 1); # number of training examples\n",
    "\n",
    "    p = 0\n",
    "\n",
    "    z = h(x_test, theta)\n",
    "    p = np.array([1 if u >= 0.5 else 0 for u in z])\n",
    "    \n",
    "    p = np.zeros((1, m))\n",
    "    for i in range(theta.shape[1]):\n",
    "        if sigmoid(theta, xt) >= 0.5:\n",
    "            p[0][i] = 1\n",
    "    return p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function gradientDescent to find the best theta\n",
    "def gradientDescent(theta, x, y, alpha=0.1, iters=100):\n",
    "    # return final theta and the loss history for each iteration\n",
    "    # final_theta, JHistory = gradientDescent(theta, x_train, y_train)\n",
    "    \n",
    "    m = len(x)   # number of training examples (or points)\n",
    "    J_history = [] # list to store history of J for each iteration\n",
    " \n",
    "    for k in range(iters):\n",
    "        theta -= alpha * derivative(theta, x, y)\n",
    "        J_history.append(loss(theta, x , y))\n",
    "\n",
    "    # the function returns the final theta and history of loss or cost function\n",
    "    return theta, J_history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load data file ex1.data\n",
    "data=pd.read_csv('ex2data1.txt', names=['x1', 'x2', 'y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "## Extracting positive and negative examples\n",
    "Admitted = data[data['y'] == 1]       # all examples with y=1 class\n",
    "notAdmitted = data[data['y'] == 0]    # all examples with y=0 class\n",
    "################################################\n",
    "\n",
    "## Drawing postive and negativs exampels\n",
    "plt.scatter(Admitted['x1'], Admitted['x2'], s=22, label='Admitted y=1', marker='o', color='white', edgecolor='darkred')\n",
    "plt.scatter(notAdmitted['x1'], notAdmitted['x2'], s=22, label='not-Admitted y=0', marker='x', color='blue')\n",
    "plt.legend()\n",
    "plt.xlabel('x1')\n",
    "plt.ylabel('x2')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extracting feature vector x and outplut label y\n",
    "\n",
    "y = data.values[:, -1]\n",
    "x = data.values[:, :-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize feature vector using the mean-standard deviation\n",
    "\n",
    "MuX = x.mean(axis=0)\n",
    "StdX = x.std(axis=0)\n",
    "\n",
    "x = (x - MuX) / StdX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Append column of ones to the feature vector\n",
    "n = x.shape[0]\n",
    "x1 = np.append(np.ones((n, 1)), x, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into x_train, x_test, y_train, y_test\n",
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(x1, y, random_state=0, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "## initialize variables for gradient descent to learn the theta values\n",
    "m, n = x_train.shape       # m is the number of examples and n is the number of features\n",
    "theta = np.zeros(n)  # initialize theta to be a vector of zeros\n",
    "\n",
    "# initialize you alpha and the number of iterations you want\n",
    "alpha = 1.5\n",
    "iters = 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3,)\n",
      "Theta =  [1.0959236  3.27506949 3.2699032 ]\n",
      "loss function =  0.19766770452898433\n"
     ]
    }
   ],
   "source": [
    "## Calling Gradient Descent Algorithm\n",
    "\n",
    "theta, J_history= gradientDescent(theta, x_train, y_train, alpha, iters)\n",
    "\n",
    "print(theta.shape)\n",
    "\n",
    "print('Theta = ', theta)\n",
    "print(\"loss function = \", J_history[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Drawing the loss or cost function J_history\n",
    "plt.plot(J_history)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Draw Decision Boundary, only works for two features data n=3\n",
    "a = (Admitted.values[:,0:2] - MuX) / StdX\n",
    "b = (notAdmitted.values[:,0:2] - MuX) / StdX\n",
    "#a = Admitted\n",
    "#b = notAdmitted\n",
    "plt.scatter(a[:, 0], a[:, 1], marker = 'o', label=\"Admitted\", color='white', edgecolor='darkred')\n",
    "plt.scatter(b[:, 0], b[:, 1], marker = 'x', label=\"Admitted\", color='blue')\n",
    "x_value1 = np.array([np.min(x[:, 1]), np.max(x[:, 1])])\n",
    "d = -(theta[0] + theta[1] * x_value1) / theta[2]\n",
    "#d = -(-25.164593 + 0.206261 * x_value) / 0.201499\n",
    "plt.plot(x_value1, d, color=\"g\")\n",
    "plt.xlabel('Exam 1 score')\n",
    "plt.ylabel('Exam 2 score')\n",
    "plt.legend(loc=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train score:  0.9125\n",
      "test score:  0.8\n"
     ]
    }
   ],
   "source": [
    "# Use sklearn Logistic Regression for (x_train, y_train)\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "lg = LogisticRegression(solver='liblinear')\n",
    "lg.fit(x_train, y_train)\n",
    "\n",
    "print(\"train score: \", lg.score(x_train, y_train))\n",
    "print(\"test score: \", lg.score(x_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Draw Decision Boundary, only works for two features data n=3\n",
    "a = (Admitted.values[:,0:2] - MuX) / StdX\n",
    "b = (notAdmitted.values[:,0:2] - MuX) / StdX\n",
    "\n",
    "plt.scatter(a[:, 0], a[:, 1], marker = 'o', label=\"Admitted\", color='white', edgecolor='darkred')\n",
    "plt.scatter(b[:, 0], b[:, 1], marker = 'x', label=\"Admitted\", color='blue')\n",
    "x_value1 = np.array([np.min(x[:, 1]), np.max(x[:, 1])])\n",
    "d = -(lg.intercept_ + lg.coef_[0][1] * x_value1) / lg.coef_[0][2]\n",
    "plt.plot(x_value1, d, color=\"g\")\n",
    "plt.xlabel('x1')\n",
    "plt.ylabel('x2')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
